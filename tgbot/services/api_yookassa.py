# - *- coding: utf- 8 - *-
import time

from yookassa import (Configuration, Settings, Payment)

from aiogram.types import Message
from aiogram import Dispatcher

from tgbot.keyboards.inline_main import close_inl
from tgbot.services.api_sqlite import add_yoo_paymentx
from tgbot.utils.const_functions import ded
from tgbot.utils.misc_functions import send_admins
from tgbot.data.config import get_yoo_config


class YooKassaApi:
    def __init__(
            self,
            dp: Message | Dispatcher,
            pass_check=False,
            pass_user=False
    ):
        config = get_yoo_config()
        self.shop_id = config.get("shop_id")
        self.api_key = config.get("api_key")

        Configuration.configure(self.shop_id, self.api_key)

        self.dp = dp
        self.pass_check = pass_check
        self.pass_user = pass_user

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–π —é–∫–∞—Å—Å–µ

    @staticmethod
    async def error_wallet():
        await send_admins("<b>ü§ñ –ÆKassa –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå</b>\n"
                          "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É")

    async def check_account(self) -> dict:
        try:
            me = Settings.get_account_settings()
            return me
        except:
            return None

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    async def pre_checker(self):
        if self.shop_id is not None and self.api_key is not None:
            me = await self.check_account()

            if self.pass_check:
                if me is not None:
                    await self.dp.answer(
                        f"<b> –ú–∞–≥–∞–∑–∏–Ω –≤ –ÆKassa –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>\n"
                        f"‚óæ ID: <code>{me['account_id']}</code>\n"
                        f"‚óæ –°—Ç–∞—Ç—É—Å: <code>{me['status']}</code>\n"
                        f"‚óæ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: <code>{','.join(me['payment_methods'])}</code>\n"
                        f"‚óæ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: <code>{me['test']}</code>\n",
                        reply_markup=close_inl,
                    )
                else:
                    await self.error_wallet()
            elif self.pass_user:
                if me is None:
                    await self.dp.edit_text(
                        "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                        "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>")
                    await self.error_wallet()
                    return False
            return True
        else:
            if self.pass_user:
                await self.dp.edit_text(
                    "<b>‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.</b>")
            await self.error_wallet()
            return False

    async def bill(self, amount: int, _way: str):
        success = await self.pre_checker()
        if not success:
            return False, False, False
        bill_message = ded(f"""
                    <b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>
                    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ 
                    <code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</code> –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º —Å—á—ë—Ç
                    ‚ùó –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è 15 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞.
                    üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>
                    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>
        """)
        bot_info = await self.dp.bot.get_me()
        botname = bot_info['username']

        payment = Payment.create({
            "amount": {
                "value": str(amount),
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{botname}"
            },
            "capture": True,
            "description": f"–ó–∞–∫–∞–∑ {time.time()}"
        })
        add_yoo_paymentx(
            yoo_id=payment.id, 
            amount=int(payment.amount.value),
            status="pending",
            confirm_url=payment.confirmation.confirmation_url,
            paid=False,
            created_at=payment.created_at
        )
        bill_url = payment.confirmation.confirmation_url
        return bill_message, bill_url, payment.id
    
    async def check_pay(self, id: str) -> tuple[str, int]:
        p = Payment.find_one(id)
        return p.status, int(p.amount.value)
