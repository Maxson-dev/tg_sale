# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.data.loader import dp
from tgbot.keyboards.inline_user import refill_bill_finl, refill_select_finl
from tgbot.services.api_yookassa import YooKassaApi
from tgbot.services.api_sqlite import \
      (update_userx, get_refillx, add_refillx, get_userx, get_yoo_paymentx, update_yoo_paymentx)
from tgbot.utils.const_functions import get_date, get_unix
from tgbot.utils.misc_functions import send_admins

min_input_rub = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
max_input_rub = 300_000

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="user_refill", state="*")
async def refill_way(call: CallbackQuery, state: FSMContext):
    get_kb = refill_select_finl()

    if get_kb is not None:
        await call.message.edit_text("<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=get_kb)
    else:
        await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", True)


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="refill_select", state="*")
async def refill_way_select(call: CallbackQuery, state: FSMContext):
    get_way = call.data.split(":")[1]

    await state.update_data(here_pay_way=get_way)

    await state.set_state("here_refill_amount")
    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")


###################################################################################
#################################### –í–í–û–î –°–£–ú–ú–´ ###################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –ÆKassa
@dp.message_handler(state="here_refill_amount")
async def refill_get(message: Message, state: FSMContext):
    if not message.text.isdigit():
         await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")

    cache_message = await message.answer("<b>‚ôª –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–∞—Ç—ë–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")
    pay_amount = int(message.text)

    if not (min_input_rub <= pay_amount <= 300000):
         await cache_message.edit_text(
            f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
            f"‚ñ∂ C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>{min_input_rub}‚ÇΩ</code> –∏ –±–æ–ª—å—à–µ <code>{max_input_rub}‚ÇΩ</code>\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
        )

    get_way = (await state.get_data())['here_pay_way']
    await state.finish()

    pay_msg, pay_link, pay_id = await (
        YooKassaApi(cache_message, pass_user=True)
    ).bill(pay_amount, get_way)

    if pay_msg:
        await cache_message.edit_text(pay_msg, reply_markup=refill_bill_finl(pay_link, pay_id, get_way))
       


###################################################################################
################################ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
@dp.callback_query_handler(text_startswith="Pay:Yoo")
async def refill_check_payment(call: CallbackQuery):
    id = call.data.split(":")[2]

    pay_status, pay_amount = await (
        YooKassaApi(call, pass_user=True)
    ).check_pay(id)

    match pay_status:
        case "succeeded":
            print("—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂:", id)
            p = get_yoo_paymentx(id)
            if not p["paid"]:
                update_yoo_paymentx(id, paid=True, status="succeeded")
                await refill_success(call, id, pay_amount)
            else:
                await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True)
        case "canceled":
            print("–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂:", id)
            update_yoo_paymentx(id, paid=False, status="canceled")
            await call.message.edit_text("<b>‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.</b>")
        case "waiting_for_capture" | "pending":
             print("–ø–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:", id)
             await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", True, cache_time=5)

##########################################################################################
######################################### –ü–†–û–ß–ï–ï #########################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(call: CallbackQuery, pay_id, amount):
    get_user = get_userx(user_id=call.from_user.id)

    update_userx(
        call.from_user.id,
        user_balance=get_user['user_balance'] + amount,
        user_refill=get_user['user_refill'] + amount,
    )

    await call.message.edit_text(
        f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>\n"
        f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ üíì</b>",
    )

    await send_admins(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user['user_login']}</b> | <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> | <code>{get_user['user_id']}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>\n"
        f"üßæ ID –ø–ª–∞—Ç–µ–∂–∞: <code>{pay_id}</code>"
    )
